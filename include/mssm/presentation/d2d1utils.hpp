#ifndef _D2D1UTILS_HPP_
#define _D2D1UTILS_HPP_

#include <Windows.h>
#include <d2d1.h>
#include <wrl.h>
#include <wincodec.h>

#include <string>

#include "windows_helper.hpp"

#define BEGIN_DUTILS_NAMESPACE namespace DUTILS {
#define END_DUTILS_NAMESPACE }

BEGIN_DUTILS_NAMESPACE

using namespace Microsoft;

typedef bool(*DrawFunc)(ID2D1Factory* factory, ID2D1RenderTarget* target);

/// <summary>Draw a bitmap and create bitmapBrush with it.</summary>
/// <param name="factory">ID2D1Factory Object to create resource.</param>
/// <param name="target">Using to create CompatibleRenderTarget for drawing.</param>
/// <param name="dfunc">Using to draw the bitmap which will be used to create the bitmapBrush</param>
/// <param name="width">Width of Canavas of Compatible RenderTarget</param>
/// <param name="height">Height of Canavas of Compatible RenderTarget</param>
/// <param name="brush">Pointer of Pointer of <code>ID2D1BitmapBrush</code> object</param>
inline HRESULT DrawBitmapBrush(ID2D1Factory* factory, ID2D1RenderTarget* target, DrawFunc dfunc,
							UINT width, UINT height, const D2D1_BITMAP_BRUSH_PROPERTIES& bitmap_brush_properties,
							const D2D1_BRUSH_PROPERTIES& brush_properties, ID2D1BitmapBrush** brush)
{

	HRESULT hr = E_FAIL;
	WRL::ComPtr<ID2D1BitmapRenderTarget> l_bitmapRender;
	hr = target->CreateCompatibleRenderTarget(D2D1::SizeF(width, height), &l_bitmapRender);
	if (FAILED(hr)) return hr;

	l_bitmapRender->BeginDraw();
	if (!dfunc(factory, l_bitmapRender.Get())) return E_FAIL;
	l_bitmapRender->EndDraw();

	WRL::ComPtr<ID2D1Bitmap> l_bitmap;
	hr = l_bitmapRender->GetBitmap(&l_bitmap);
	if (FAILED(hr)) return hr;
	hr = target->CreateBitmapBrush(l_bitmap.Get(), bitmap_brush_properties, brush_properties, brush);
	if (FAILED(hr)) return hr;
	return S_OK;
}


/// <summary>Draw a bitmap and create bitmapBrush with it.</summary>
/// <param name="factory">ID2D1Factory Object to create resource.</param>
/// <param name="target">Using to create CompatibleRenderTarget for drawing.</param>
/// <param name="dfunc">Using to draw the bitmap which will be used to create the bitmapBrush</param>
/// <param name="width">Width of Canavas of Compatible RenderTarget</param>
/// <param name="height">Height of Canavas of Compatible RenderTarget</param>
/// <param name="brush">Pointer of Pointer of <code>ID2D1BitmapBrush</code> object</param>
inline HRESULT DrawBitmapBrush(ID2D1Factory* factory, ID2D1RenderTarget* target, DrawFunc dfunc,
							UINT width, UINT height, ID2D1BitmapBrush** brush)
{
	D2D1_BRUSH_PROPERTIES brush_properties;
	brush_properties.opacity = 1;
	brush_properties.transform = D2D1::Matrix3x2F::Identity();
	D2D1_BITMAP_BRUSH_PROPERTIES bitmap_brush_properties;
	bitmap_brush_properties.extendModeX = D2D1_EXTEND_MODE::D2D1_EXTEND_MODE_WRAP;
	bitmap_brush_properties.extendModeY = D2D1_EXTEND_MODE::D2D1_EXTEND_MODE_WRAP;
	bitmap_brush_properties.interpolationMode = D2D1_BITMAP_INTERPOLATION_MODE::D2D1_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR;
	return DrawBitmapBrush(factory, target, dfunc, width, height, bitmap_brush_properties, brush_properties, brush);
}

/// <summary> Load Bitmap from file</summary>
inline HRESULT LoadBitmapFromFile(LPCWSTR filename, ID2D1RenderTarget* target, ID2D1Bitmap** pBitmap)
{
	HRESULT hr                      = S_FALSE;
	Microsoft::WRL::ComPtr<IWICImagingFactory> wic_factory;
	Microsoft::WRL::ComPtr<IWICBitmapDecoder> decoder;
	Microsoft::WRL::ComPtr<IWICBitmapFrameDecode> frame;
	Microsoft::WRL::ComPtr<IWICFormatConverter> converter;

	hr = CoCreateInstance(CLSID_WICImagingFactory, NULL, CLSCTX_INPROC_SERVER, IID_PPV_ARGS(&wic_factory));
	if FAILED(hr) return hr;
	hr = wic_factory->CreateDecoderFromFilename(filename, NULL, GENERIC_READ, WICDecodeMetadataCacheOnLoad, &decoder);
	if FAILED(hr) return hr;
	hr = decoder->GetFrame(0, &frame);
	if FAILED(hr) return hr;
	hr = wic_factory->CreateFormatConverter(&converter);
	if FAILED(hr) return hr;
	hr = converter->Initialize(frame.Get(), GUID_WICPixelFormat32bppPBGRA, WICBitmapDitherTypeNone, NULL, 0.f, WICBitmapPaletteTypeMedianCut);
	if FAILED(hr) return hr;
	hr = target->CreateBitmapFromWicBitmap(converter.Get(), 0, pBitmap);
	if FAILED(hr) return hr;
	return S_OK;
}

/// <summary> Load Bitmap from resouce of current module </summary>
/// <param name="Resource_ID">Identify of the resource, which is autogenerated by visual studio.</param>
/// <param name="Resource_type">Type name of the resource</param>
/// <param name="ppBitmap">out parameter</param>
inline HRESULT LoadBitmapFromResource(ID2D1RenderTarget* target, IWICImagingFactory* wic_factory,
							          UINT Resource_ID,          LPCWSTR Resource_type, 
									  ID2D1Bitmap** ppBitmap)
{
	HRESULT hr = E_FAIL;
	HRSRC resource_handle = FindResource(::GetModuleHandle(NULL), MAKEINTRESOURCE(Resource_ID), Resource_type);
	if (resource_handle == 0) return hr;
	HGLOBAL hres = LoadResource(::GetModuleHandle(NULL), resource_handle);
	if (hres == 0) return hr;
	DWORD resource_size = SizeofResource(::GetModuleHandle(NULL), resource_handle);

	Microsoft::WRL::ComPtr<IWICStream> bitmap_stream;
	hr = wic_factory->CreateStream(&bitmap_stream);
	if (FAILED(hr)) return hr;
	Microsoft::WRL::ComPtr<IWICBitmap> wicbitmap;
	hr = bitmap_stream->InitializeFromMemory(reinterpret_cast<BYTE*>(hres), resource_size);
	if (FAILED(hr)) return hr;
	Microsoft::WRL::ComPtr<IWICBitmapDecoder> bitmap_decoder;
	hr = wic_factory->CreateDecoderFromStream(bitmap_stream.Get(), NULL, WICDecodeMetadataCacheOnLoad, &bitmap_decoder);
	if (FAILED(hr)) return hr;
	Microsoft::WRL::ComPtr<IWICBitmapFrameDecode> frame_decoder;
	hr = bitmap_decoder->GetFrame(0, &frame_decoder);
	if (FAILED(hr)) return hr;
	Microsoft::WRL::ComPtr<IWICFormatConverter> converter;
	hr = wic_factory->CreateFormatConverter(&converter);
	if (FAILED(hr)) return hr;
	hr = converter->Initialize(frame_decoder.Get(), GUID_WICPixelFormat32bppPBGRA, WICBitmapDitherTypeNone, NULL, 0.0f, WICBitmapPaletteTypeMedianCut);
	if (FAILED(hr)) return hr;
	hr =target->CreateBitmapFromWicBitmap(converter.Get(), 0, ppBitmap);
	if (FAILED(hr)) return hr;
	return S_OK;
}

/// <summary> Load Bitmap from resouce of current module </summary>
/// <param name="Resource_ID">Identify of the resource, which is autogenerated by visual studio.</param>
/// <param name="Resource_type">Type name of the resource</param>
/// <param name="ppBitmap">out parameter</param>
inline HRESULT LoadBitmapFromResource(ID2D1RenderTarget* target, UINT Resource_ID, 
									  LPCWSTR Resource_type,     ID2D1Bitmap** ppBitmap){
	Microsoft::WRL::ComPtr<IWICImagingFactory> wic_factory;
	HRESULT hr = ::CoCreateInstance(CLSID_WICImagingFactory, NULL, CLSCTX_INPROC_SERVER, IID_PPV_ARGS(&wic_factory));
	if (FAILED(hr)) return hr;
	return LoadBitmapFromResource(target, wic_factory.Get(), Resource_ID, Resource_type, ppBitmap);
}

inline std::string GetLastErrorAsString()
{
	//Get the error message, if any.
	DWORD errorMessageID = ::GetLastError();
	if (errorMessageID == 0)
		return std::string(); //No error message has been recorded

	LPSTR messageBuffer = nullptr;
	size_t size = FormatMessageA(FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,
		NULL, errorMessageID, MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), (LPSTR)&messageBuffer, 0, NULL);

	std::string message(messageBuffer, size);

	//Free the buffer.
	LocalFree(messageBuffer);

	return message;
}

END_DUTILS_NAMESPACE

#endif // _D2D1UTILS_HPP_